/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './app/__root'
import { Route as UnauthedRouteImport } from './app/_unauthed'
import { Route as AuthedRouteImport } from './app/_authed'
import { Route as IndexRouteImport } from './app/index'
import { Route as UnauthedSignUpIndexRouteImport } from './app/_unauthed/sign-up/index'
import { Route as UnauthedSignInIndexRouteImport } from './app/_unauthed/sign-in/index'
import { Route as UnauthedResetPasswordIndexRouteImport } from './app/_unauthed/reset-password/index'
import { Route as AuthedUsersIndexRouteImport } from './app/_authed/users/index'
import { Route as AuthedNotificationsIndexRouteImport } from './app/_authed/notifications/index'
import { Route as AuthedDashboardIndexRouteImport } from './app/_authed/dashboard/index'
import { Route as AuthedBillingIndexRouteImport } from './app/_authed/billing/index'
import { Route as AuthedAccountIndexRouteImport } from './app/_authed/account/index'
import { Route as ApiAuthSplatRouteImport } from './app/api/auth/$'
import { Route as AuthedUsersTeamsRouteImport } from './app/_authed/users/teams'
import { Route as AuthedUsersBulkRouteImport } from './app/_authed/users/bulk'

const UnauthedRoute = UnauthedRouteImport.update({
  id: '/_unauthed',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedRoute = AuthedRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UnauthedSignUpIndexRoute = UnauthedSignUpIndexRouteImport.update({
  id: '/sign-up/',
  path: '/sign-up/',
  getParentRoute: () => UnauthedRoute,
} as any)
const UnauthedSignInIndexRoute = UnauthedSignInIndexRouteImport.update({
  id: '/sign-in/',
  path: '/sign-in/',
  getParentRoute: () => UnauthedRoute,
} as any)
const UnauthedResetPasswordIndexRoute =
  UnauthedResetPasswordIndexRouteImport.update({
    id: '/reset-password/',
    path: '/reset-password/',
    getParentRoute: () => UnauthedRoute,
  } as any)
const AuthedUsersIndexRoute = AuthedUsersIndexRouteImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedNotificationsIndexRoute =
  AuthedNotificationsIndexRouteImport.update({
    id: '/notifications/',
    path: '/notifications/',
    getParentRoute: () => AuthedRoute,
  } as any)
const AuthedDashboardIndexRoute = AuthedDashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedBillingIndexRoute = AuthedBillingIndexRouteImport.update({
  id: '/billing/',
  path: '/billing/',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedAccountIndexRoute = AuthedAccountIndexRouteImport.update({
  id: '/account/',
  path: '/account/',
  getParentRoute: () => AuthedRoute,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedUsersTeamsRoute = AuthedUsersTeamsRouteImport.update({
  id: '/users/teams',
  path: '/users/teams',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedUsersBulkRoute = AuthedUsersBulkRouteImport.update({
  id: '/users/bulk',
  path: '/users/bulk',
  getParentRoute: () => AuthedRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/users/bulk': typeof AuthedUsersBulkRoute
  '/users/teams': typeof AuthedUsersTeamsRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/account': typeof AuthedAccountIndexRoute
  '/billing': typeof AuthedBillingIndexRoute
  '/dashboard': typeof AuthedDashboardIndexRoute
  '/notifications': typeof AuthedNotificationsIndexRoute
  '/users': typeof AuthedUsersIndexRoute
  '/reset-password': typeof UnauthedResetPasswordIndexRoute
  '/sign-in': typeof UnauthedSignInIndexRoute
  '/sign-up': typeof UnauthedSignUpIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/users/bulk': typeof AuthedUsersBulkRoute
  '/users/teams': typeof AuthedUsersTeamsRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/account': typeof AuthedAccountIndexRoute
  '/billing': typeof AuthedBillingIndexRoute
  '/dashboard': typeof AuthedDashboardIndexRoute
  '/notifications': typeof AuthedNotificationsIndexRoute
  '/users': typeof AuthedUsersIndexRoute
  '/reset-password': typeof UnauthedResetPasswordIndexRoute
  '/sign-in': typeof UnauthedSignInIndexRoute
  '/sign-up': typeof UnauthedSignUpIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/_unauthed': typeof UnauthedRouteWithChildren
  '/_authed/users/bulk': typeof AuthedUsersBulkRoute
  '/_authed/users/teams': typeof AuthedUsersTeamsRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/_authed/account/': typeof AuthedAccountIndexRoute
  '/_authed/billing/': typeof AuthedBillingIndexRoute
  '/_authed/dashboard/': typeof AuthedDashboardIndexRoute
  '/_authed/notifications/': typeof AuthedNotificationsIndexRoute
  '/_authed/users/': typeof AuthedUsersIndexRoute
  '/_unauthed/reset-password/': typeof UnauthedResetPasswordIndexRoute
  '/_unauthed/sign-in/': typeof UnauthedSignInIndexRoute
  '/_unauthed/sign-up/': typeof UnauthedSignUpIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/users/bulk'
    | '/users/teams'
    | '/api/auth/$'
    | '/account'
    | '/billing'
    | '/dashboard'
    | '/notifications'
    | '/users'
    | '/reset-password'
    | '/sign-in'
    | '/sign-up'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/users/bulk'
    | '/users/teams'
    | '/api/auth/$'
    | '/account'
    | '/billing'
    | '/dashboard'
    | '/notifications'
    | '/users'
    | '/reset-password'
    | '/sign-in'
    | '/sign-up'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/_unauthed'
    | '/_authed/users/bulk'
    | '/_authed/users/teams'
    | '/api/auth/$'
    | '/_authed/account/'
    | '/_authed/billing/'
    | '/_authed/dashboard/'
    | '/_authed/notifications/'
    | '/_authed/users/'
    | '/_unauthed/reset-password/'
    | '/_unauthed/sign-in/'
    | '/_unauthed/sign-up/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
  UnauthedRoute: typeof UnauthedRouteWithChildren
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_unauthed': {
      id: '/_unauthed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UnauthedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_unauthed/sign-up/': {
      id: '/_unauthed/sign-up/'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof UnauthedSignUpIndexRouteImport
      parentRoute: typeof UnauthedRoute
    }
    '/_unauthed/sign-in/': {
      id: '/_unauthed/sign-in/'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof UnauthedSignInIndexRouteImport
      parentRoute: typeof UnauthedRoute
    }
    '/_unauthed/reset-password/': {
      id: '/_unauthed/reset-password/'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof UnauthedResetPasswordIndexRouteImport
      parentRoute: typeof UnauthedRoute
    }
    '/_authed/users/': {
      id: '/_authed/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthedUsersIndexRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/notifications/': {
      id: '/_authed/notifications/'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof AuthedNotificationsIndexRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/dashboard/': {
      id: '/_authed/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthedDashboardIndexRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/billing/': {
      id: '/_authed/billing/'
      path: '/billing'
      fullPath: '/billing'
      preLoaderRoute: typeof AuthedBillingIndexRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/account/': {
      id: '/_authed/account/'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AuthedAccountIndexRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed/users/teams': {
      id: '/_authed/users/teams'
      path: '/users/teams'
      fullPath: '/users/teams'
      preLoaderRoute: typeof AuthedUsersTeamsRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/users/bulk': {
      id: '/_authed/users/bulk'
      path: '/users/bulk'
      fullPath: '/users/bulk'
      preLoaderRoute: typeof AuthedUsersBulkRouteImport
      parentRoute: typeof AuthedRoute
    }
  }
}

interface AuthedRouteChildren {
  AuthedUsersBulkRoute: typeof AuthedUsersBulkRoute
  AuthedUsersTeamsRoute: typeof AuthedUsersTeamsRoute
  AuthedAccountIndexRoute: typeof AuthedAccountIndexRoute
  AuthedBillingIndexRoute: typeof AuthedBillingIndexRoute
  AuthedDashboardIndexRoute: typeof AuthedDashboardIndexRoute
  AuthedNotificationsIndexRoute: typeof AuthedNotificationsIndexRoute
  AuthedUsersIndexRoute: typeof AuthedUsersIndexRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedUsersBulkRoute: AuthedUsersBulkRoute,
  AuthedUsersTeamsRoute: AuthedUsersTeamsRoute,
  AuthedAccountIndexRoute: AuthedAccountIndexRoute,
  AuthedBillingIndexRoute: AuthedBillingIndexRoute,
  AuthedDashboardIndexRoute: AuthedDashboardIndexRoute,
  AuthedNotificationsIndexRoute: AuthedNotificationsIndexRoute,
  AuthedUsersIndexRoute: AuthedUsersIndexRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

interface UnauthedRouteChildren {
  UnauthedResetPasswordIndexRoute: typeof UnauthedResetPasswordIndexRoute
  UnauthedSignInIndexRoute: typeof UnauthedSignInIndexRoute
  UnauthedSignUpIndexRoute: typeof UnauthedSignUpIndexRoute
}

const UnauthedRouteChildren: UnauthedRouteChildren = {
  UnauthedResetPasswordIndexRoute: UnauthedResetPasswordIndexRoute,
  UnauthedSignInIndexRoute: UnauthedSignInIndexRoute,
  UnauthedSignUpIndexRoute: UnauthedSignUpIndexRoute,
}

const UnauthedRouteWithChildren = UnauthedRoute._addFileChildren(
  UnauthedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
  UnauthedRoute: UnauthedRouteWithChildren,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
